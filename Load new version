
package application;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.text.ParseException;

import javax.tools.JavaFileObject;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

import javafx.application.Application;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.text.Font;
import javafx.stage.Modality;
import javafx.stage.Stage;

public class Load extends Button{
 static String file;
  static boolean answer;
   public static void loadHelper(String jsonFilepath,QuizGraph qg) throws FileNotFoundException, IOException, ParseException, org.json.simple.parser.ParseException {
	   //QuestionNode [] qn = null;
	   Object obj = new JSONParser().parse(new FileReader(jsonFilepath));
     JSONObject jo = (JSONObject) obj;
     JSONArray packageArray = (JSONArray) jo.get("questionArray"); 

	   for (Object o : packageArray)
	   {
	     JSONObject person = (JSONObject) o;

	     String name = (String) person.get("meta-data");
	     System.out.println(name);

	     String city = (String) person.get("questionText");
	     
	     System.out.println(city);

	     String topic = (String) person.get("topic");
	     qg.addTopic(topic);
	     System.out.println(topic);
	     
	     String image = (String) person.get("image");
	     System.out.println(image);

	     JSONArray choice = (JSONArray) person.get("choiceArray");
	     for (Object c : choice)
	     {
	       System.out.println(c+"");
	     }
	   }
//	   Package[] packages = null;
//       Object obj = new JSONParser().parse(new FileReader(jsonFilepath));
//       JSONObject jo = (JSONObject) obj;
//       JSONArray packageArray = (JSONArray) jo.get("questionArray");
//
//       packages = new Package[packageArray.size()];
//       for (int i = 0; i < packageArray.size(); i++) {
//           JSONObject jsonPackage = (JSONObject) packageArray.get(i);
//           JSONArray depsJSONArray = (JSONArray) jsonPackage.get("dependencies");
//           String[] dependencyArray = new String[depsJSONArray.size()];
//           for (int j = 0; j < depsJSONArray.size(); j++) {
//               dependencyArray[j] = (String) depsJSONArray.get(j);
//
//           }
//           Package p = new Package((String) jsonPackage.get("questionText"), dependencyArray);
//           packages[i] = p;
//       }
//       buildFromPackages(packages, qg);

   }

   private static void buildFromPackages(Package[] packages,QuizGraph qg) {
//       if (packages == null || packages.length == 0) {
//           throw new IllegalArgumentException();
//       }
//
//       for (Package pkg : packages) {
//           qg.addTopic(pkg.getName());
//           for (String dependency : qg.getAllTopics()) {
//               qg.addTopic(dependency);
//               QuestionNode q = new QuestionNode(dependency, null, null, null, null, answer);
//               qg.addQuestion(pkg.getName(), q);
//           }
//       }
   }
   
   public static void loadMethod(String Title, String message, QuizGraph qg) {
     Stage window = new Stage();
     window.initModality(Modality.APPLICATION_MODAL);
     window.setTitle("Load");
     window.setMinWidth(250.0);
     Label load = new Label();
     load.setText(message);
     Button b1 = new Button("Load");
     b1.setOnAction(e -> {
         file = LoadWarning.display("LoadFile", "LoadFile");
         System.out.println(file);
        try {
			loadHelper(file,qg);
			  System.out.println(qg.getTopicQuestions("questionText"));
		         System.out.println(qg.questionNum());
		         System.out.println(qg.topicNum());
		         System.out.println(qg.getAllTopics());
		} catch (IOException | ParseException | org.json.simple.parser.ParseException e1) {
			e1.printStackTrace();
		}
     });


     VBox layout = new VBox();
     layout.getChildren().addAll(load, b1);
     layout.setAlignment(Pos.CENTER);
     Scene scene = new Scene(layout);
     window.setScene(scene);
     window.showAndWait();
     
    //return answer;
   }
//   public static void main(String [] args) {
//	   
//	   QuizGraph qg = new QuizGraph();
//	   try {
//		Load.loadHelper("questions_001.json", qg);
//	} catch (IOException | ParseException | org.json.simple.parser.ParseException e) {
//		// TODO Auto-generated catch block
//		e.printStackTrace();
//	}
//   }

}
